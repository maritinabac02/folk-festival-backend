package com.folkfest.controller;
import com.folkfest.dto.PerformanceDtos.*; import com.folkfest.model.Performance; import com.folkfest.service.PerformanceService; import jakarta.validation.Valid; import org.springframework.http.ResponseEntity; import org.springframework.security.core.annotation.AuthenticationPrincipal; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.web.bind.annotation.*;
@RestController @RequestMapping("/api/performances")
public class PerformanceController {
  private final PerformanceService performanceService; public PerformanceController(PerformanceService performanceService){ this.performanceService=performanceService; }
  @PostMapping public ResponseEntity<Performance> create(@Valid @RequestBody CreatePerformanceRequest req, @AuthenticationPrincipal UserDetails me){ return ResponseEntity.ok(performanceService.createPerformance(req, me.getUsername())); }
  @PatchMapping("/{id}") public ResponseEntity<Performance> update(@PathVariable String id, @RequestBody UpdatePerformanceRequest req, @AuthenticationPrincipal UserDetails me){ return ResponseEntity.ok(performanceService.updatePerformance(id, req, me.getUsername())); }
  @PostMapping("/{id}/band/manager/{username}") public ResponseEntity<?> addBandManager(@PathVariable String id, @PathVariable String username, @AuthenticationPrincipal UserDetails me){ performanceService.addBandManager(id, username, me.getUsername()); return ResponseEntity.ok().build(); }
  @PostMapping("/{id}/submit") public ResponseEntity<Performance> submit(@PathVariable String id, @AuthenticationPrincipal UserDetails me){ return ResponseEntity.ok(performanceService.submitPerformance(id, me.getUsername())); }
  @DeleteMapping("/{id}") public ResponseEntity<?> withdraw(@PathVariable String id, @AuthenticationPrincipal UserDetails me){ performanceService.withdrawPerformance(id, me.getUsername()); return ResponseEntity.noContent().build(); }
  @PostMapping("/{id}/assign") public ResponseEntity<Performance> assign(@PathVariable String id, @Valid @RequestBody AssignStaffRequest req, @AuthenticationPrincipal UserDetails me){ return ResponseEntity.ok(performanceService.assignStaff(id, req, me.getUsername())); }
  @PostMapping("/{id}/review") public ResponseEntity<Performance> review(@PathVariable String id, @Valid @RequestBody ReviewRequest req, @AuthenticationPrincipal UserDetails me){ return ResponseEntity.ok(performanceService.review(id, req, me.getUsername())); }
  @PostMapping("/{id}/approve") public ResponseEntity<Performance> approve(@PathVariable String id, @AuthenticationPrincipal UserDetails me){ return ResponseEntity.ok(performanceService.approve(id, me.getUsername())); }
  @PostMapping("/{id}/reject") public ResponseEntity<Performance> reject(@PathVariable String id, @RequestParam(required=false) String reason, @AuthenticationPrincipal UserDetails me){ return ResponseEntity.ok(performanceService.reject(id, reason, me.getUsername())); }
  @PostMapping("/{id}/final-submit") public ResponseEntity<Performance> finalSubmit(@PathVariable String id, @Valid @RequestBody FinalSubmissionRequest req, @AuthenticationPrincipal UserDetails me){ return ResponseEntity.ok(performanceService.finalSubmission(id, req, me.getUsername())); }
  @PostMapping("/{id}/accept") public ResponseEntity<Performance> accept(@PathVariable String id, @RequestParam String scheduledTime, @RequestParam String scheduledStage, @AuthenticationPrincipal UserDetails me){ return ResponseEntity.ok(performanceService.acceptAndSchedule(id, scheduledTime, scheduledStage, me.getUsername())); }
}
